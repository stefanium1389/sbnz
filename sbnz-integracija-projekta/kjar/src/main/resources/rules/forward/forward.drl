package forward

import com.ftn.sbnz.model.models.BloodSample
import com.ftn.sbnz.model.dto.BloodSampleDto
import com.ftn.sbnz.model.models.BloodDonor
import com.ftn.sbnz.model.dto.DonorQuestionaireDto
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

// rule "Questionaire: Drunk alcohol recently"
//     when
//         $q: DonorQuestionaireDto(isHasDrunkAlcohol() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(1, ChronoUnit.DAYS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" took alcohol recently, banned for 1 day until "+$donor.getBannedUntil());
// end

// rule "Questionaire: Medicated recently"
//     when
//         $q: DonorQuestionaireDto(isTakingMedicine() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(3, ChronoUnit.DAYS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" took medicine recently, banned for 3 days until "+$donor.getBannedUntil());

// end

// rule "Questionaire: Aspirin recently"
//     when
//         $q: DonorQuestionaireDto(isHadAspirin() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(5, ChronoUnit.DAYS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" took aspirin recently, banned for 5 days until "+$donor.getBannedUntil());

// end

// rule "Questionaire: Fever recently"
//     when
//         $q: DonorQuestionaireDto(isHadFever() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(10, ChronoUnit.DAYS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has had a fever recently, banned for 10 days until "+$donor.getBannedUntil());
// end

// rule "Questionaire: Tattoos recently"
//     when
//         $q: DonorQuestionaireDto(isDidTattoosOrPiercing() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(6, ChronoUnit.MONTHS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has done tatoos or piercings recently, banned for 6 months until "+$donor.getBannedUntil());
// end

// rule "Questionaire: Recieved blood or operated recently"
//     when
//         $q: DonorQuestionaireDto(isRecievedBloodorOperated() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(6, ChronoUnit.MONTHS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has recieved blood or operated recently, banned for 6 months until "+$donor.getBannedUntil());
// end

// rule "Questionaire: Tick or Lyme disease recently"
//     when
//         $q: DonorQuestionaireDto(isHadTickLymeDisease() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(12, ChronoUnit.MONTHS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has had ticks or Lyme disease recently, banned for 12 months until "+$donor.getBannedUntil());
// end

// rule "Questionaire: Vaccinated recently"
//     when
//         $q: DonorQuestionaireDto(isVaccinatedRecently() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(12, ChronoUnit.MONTHS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" was vaccinated recently, banned for 12 months until "+$donor.getBannedUntil());

// end

// rule "Questionaire: has had hepatitis A,B,C"
//     when
//         $q: DonorQuestionaireDto(isHasHepatitis() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has had hepatitis A,B,C , banned forever "+$donor.getBannedUntil());
// end

// rule "Questionaire: has had HIV"
//     when
//         $q: DonorQuestionaireDto(isHasHIV() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has had HIV , banned forever "+$donor.getBannedUntil());
// end

// rule "Questionaire: has had drugs"
//     when
//         $q: DonorQuestionaireDto(isHasTakenDrugs() == true)
//         $donor: BloodDonor(getId() == $q.getDonorId())
//     then
//         $donor.setCanDonate(false);
//         $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
//         update($donor);
//         System.out.println("Donor ID: " +$donor.getId()+" has had drugs , banned forever "+$donor.getBannedUntil());
// end

rule "HIV Positive"
    when
        $sample : BloodSample(isHivPositive() == true, isAdditionalTestingDone() == false)
    then
        modify($sample){
            setAdditionalTesting(true);
        }
        System.out.println("Sample ID " + $sample.getId() + " initial test is HIV positive. Additional testing needed");

end

rule "HIV Positive additional test"
    when
        $sample : BloodSample(isHivPositive() == true, isAdditionalTesting() == true)
        $dto : BloodSampleDto(id == $sample.getId())
    then

        $sample.setAdditionalTesting(false);
        $sample.redoHIVTest();
        $sample.setAdditionalTestingDone(true);
        update($sample);
        modify($dto) {
            setHivPositive($sample.isHivPositive());
        }
        System.out.println("Sample ID " + $sample.getId() + " is HIV " + $sample.isHivPositive() + " after additional testing");
end


rule "Hepatitis B Positive"
    when
        $sample : BloodSample(isHepatitisBPositive() == true, isAdditionalTestingDone() == false)
    then
        System.out.println("Sample ID " + $sample.getId() + " initial test is Hepatitis B positive. Additional testing needed");
        modify($sample){
            setAdditionalTesting(true);
        }
end

rule "Hepatitis B Positive additional test"
    when
        $sample : BloodSample(isHepatitisBPositive() == true, isAdditionalTesting() == true)
        $dto: BloodSampleDto(getId() == $sample.getId())
    then
        $sample.setAdditionalTesting(false);
        $sample.redoHepatitisBTest();
        $sample.setAdditionalTestingDone(true);
        update($sample);
        modify($dto){
            setHepatitisBPositive($sample.isHepatitisBPositive());
        }
        System.out.println("Sample ID " + $sample.getId() + " is Hepatitis C " + $sample.isHepatitisBPositive() +" after additional testing");

end

rule "Hepatitis C Positive"
    when
        $sample : BloodSample(isHepatitisCPositive() == true, isAdditionalTestingDone() == false)
    then
        System.out.println("Sample ID " + $sample.getId() + " initial test is Hepatitis C positive. Additional testing needed");
        modify($sample){
            setAdditionalTesting(true);
        }
end

rule "Hepatitis C Positive additional test"
    when
        $sample : BloodSample(isHepatitisCPositive() == true, isAdditionalTesting() == true)
        $dto: BloodSampleDto(getId() == $sample.getId())
    then
        $sample.setAdditionalTesting(false);
        $sample.redoHepatitisCTest();
        $sample.setAdditionalTestingDone(true);
        update($sample);
        modify($dto){
            setHepatitisCPositive($sample.isHepatitisCPositive());
        }
        System.out.println("Sample ID " + $sample.getId() + " is Hepatitis C " + $sample.isHepatitisCPositive() +" after additional testing");

end

rule "Syphillis Positive"
    when
        $sample : BloodSample(isSyphilisPositive() == true, isAdditionalTestingDone() == false)
    then
        System.out.println("Sample ID " + $sample.getId() + " initial test is syphilis positive. Additional testing needed");
        modify($sample){
            setAdditionalTesting(true);
        }
end

rule "Syphillis Positive additional test"
    when
        $sample : BloodSample(isSyphilisPositive() == true, isAdditionalTesting() == true)
        $dto: BloodSampleDto(getId() == $sample.getId())
    then
        $sample.setAdditionalTesting(false);
        $sample.redoSyphilisTest();
        $sample.setAdditionalTestingDone(true);
        modify($dto){
            setSyphilisPositive($sample.isSyphilisPositive());
        }
        System.out.println("Sample ID " + $sample.getId() + " is syphillis " + $sample.isHepatitisCPositive() +" after additional testing");

end

rule "RhD Positive"
    when
        $sample : BloodSample(isRhD() == true)
        $dto: BloodSampleDto(getId() == $sample.getId())
    then
        $dto.setRhD(true); 
        $dto.setRhPhenotype($sample.getRhPhenotype().name());
        update($dto);
        System.out.println("Sample ID " + $sample.getId() + " is RhD positive and has Rh Phenotype: " + $sample.getRhPhenotype());
end

rule "RhD Negative"
    when
        $sample : BloodSample(isRhD() == false)
        $dto : BloodSampleDto(getId() == $sample.getId())
    then
        $dto.setRhD(false);
        $dto.setRhPhenotype(null);
        update($dto);
        System.out.println("Sample ID " + $sample.getId() + " is RhD negative");
end

rule "Ban donor with HIV"
    no-loop
    when
        $sample : BloodSample($sample.isHivPositive() == true, $sample.isAdditionalTestingDone() == true)
        $donor: BloodDonor($sample.getDonorId() == $donor.getId())
    then
            $donor.setCanDonate(false);
            $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
            update($donor);
        System.out.println("Banned donor ID " + $donor.getId() + " forever");
end

rule "Ban donor with Hepatitis B"
    no-loop
    when
        $sample : BloodSample($sample.isHepatitisBPositive() == true, $sample.isAdditionalTestingDone() == true)
        $donor: BloodDonor($sample.getDonorId() == $donor.getId())
    then
        $donor.setCanDonate(false);
            $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
            update($donor);
        System.out.println("Banned donor ID " + $donor.getId() + " forever");
end

rule "Ban donor with Hepatitis C"
    no-loop
    when
        $sample : BloodSample($sample.isHepatitisCPositive() == true, $sample.isAdditionalTestingDone() == true)
        $donor: BloodDonor($sample.getDonorId() == $donor.getId())
    then
            $donor.setCanDonate(false);
            $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
            update($donor);
        System.out.println("Banned donor ID " + $donor.getId() + " forever");
end

rule "Ban donor with Syphilis"
    no-loop
    when
        $sample : BloodSample($sample.isSyphilisPositive() == true, $sample.isAdditionalTestingDone() == true)
        $donor: BloodDonor($sample.getDonorId() == $donor.getId())
    then
            $donor.setCanDonate(false);
            $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
            update($donor);
        System.out.println("Banned donor ID " + $donor.getId() + " forever");
end

rule "Check for irregular eritrocite antibodies: unidentified"
    no-loop
    when
        $sample : BloodSample($sample.isIrregularEritrociteAntibodies() == true, $sample.isIrregularEritrociteAntibodiesIdentified() == false)
        $dto: BloodSampleDto($sample.getId() == $dto.getId())
    then
        $sample.setUseEritrocitesOnly(true);
        $dto.setUseEritrocitesOnly(true);
        update($sample);
        update($dto);
        System.out.println("Sample ID "+$sample.getId()+" Irregular eritrocite antibodies present but not identified, use eritrocites only");
end

rule "Check for irregular eritrocite antibodies: non-specific"
    no-loop
    when
        $sample : BloodSample($sample.isIrregularEritrociteAntibodies() == true, $sample.isIrregularEritrociteAntibodiesIdentified() == true, $sample.isIrregularEritrociteAntibodiesSpecific() == false)
        $dto: BloodSampleDto($sample.getId() == $dto.getId())
    then
        $sample.setUseEritrocitesOnly(true);
        $dto.setUseEritrocitesOnly(true);
        update($sample);
        update($dto);
        System.out.println("Sample ID "+$sample.getId()+" Irregular eritrocite antibodies present but not specified, use ertirocites only");
end

rule "Check for irregular eritrocite antibodies: specific"
    no-loop
    when
        $sample : BloodSample($sample.isIrregularEritrociteAntibodies() == true, $sample.isIrregularEritrociteAntibodiesIdentified() == true, $sample.isIrregularEritrociteAntibodiesSpecific() == true)
        $donor : BloodDonor($sample.getDonorId() == $donor.getId())
    then
        $donor.setCanDonate(false);
        $donor.setBannedUntil(LocalDateTime.now().plus(150, ChronoUnit.YEARS));
        update($donor);
        System.out.println("Irregular eritrocite antibodies present and specified, ban forever user ID "+$donor.getId());
end

